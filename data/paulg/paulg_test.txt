In Lisp, you don't just write your program down toward the language,
you also build the language up toward your program.  As you're
writing a program you may think "I wish Lisp had such-and-such an
operator." So you go and write it. Afterward
you realize that using the new operator would simplify the design  
of another part of the program, and so on.
Language and program evolve together.
Like the border between two warring states,
the boundary between language and program is drawn and redrawn,
until eventually it comes to rest along the mountains and rivers,
the natural frontiers of your problem.
In the end your program will look as if the language had been
designed for it.
And when language and
program fit one another well, you end up with code which is
clear, small, and efficient.
It's worth emphasizing that bottom-up design doesn't mean
just writing the same program in a different order.  When you
work bottom-up, you usually end up with a different program.
Instead of a single, monolithic program,
you will get a larger language with more abstract operators,   
and a smaller program written in it.  Instead of a lintel,
you'll get an arch.
In typical code, once you abstract out the parts which are
merely bookkeeping, what's left is much shorter;
the higher you build up the language, the less distance you
will have to travel from the top down to it.
This brings several advantages:
 By making the language do more of the work, bottom-up design
yields programs which are smaller and more agile.  A shorter
program doesn't have to be divided into so many components, and
fewer components means programs which are easier to read or
modify.  Fewer components also means fewer connections between   
components, and thus less chance for errors there.  As
industrial designers strive to reduce the number of moving parts
in a machine, experienced Lisp programmers use bottom-up design
to reduce the size and complexity of their programs. Bottom-up design promotes code re-use.
When you write two
or more programs, many of the utilities you wrote for the first
program will also be useful in the succeeding ones.  Once you've  
acquired a large substrate of utilities, writing a new program can
take only a fraction of the effort it would require if you had to 
start with raw Lisp. Bottom-up design makes programs easier to read.

An instance of this type
of abstraction asks the reader to understand a general-purpose operator;
an instance of functional abstraction asks the reader to understand
a special-purpose subroutine. [1] Because it causes you always to be on the lookout for patterns
in your code, working bottom-up helps to clarify your ideas about
the design of your program.  If two distant components of a program
are similar in form, you'll be led to notice the similarity and
perhaps to redesign the program in a simpler way.


Bottom-up design is possible to a certain degree in languages
other than Lisp.  Whenever you see library functions,
bottom-up design is happening.  However, Lisp gives you much broader
powers in this department, and augmenting the language plays a
proportionately larger role in Lisp style-- so much so that
Lisp is not just a different language, but a whole different way
of programming.It's true that this style of development is better suited to
programs which can be written by small groups.  However, at the
same time, it extends the limits of what can be done by a small
group.  In The Mythical Man-Month,
Frederick Brooks
proposed that the productivity of a group of programmers
does not grow linearly with its size.  As the size of the
group increases, the productivity of individual programmers
goes down.  The experience of Lisp programming  
suggests a more cheerful way
to phrase this law: as the size of the group decreases, the
productivity of individual programmers goes up.
A small group wins, relatively speaking, simply because it's
smaller.  When a small group also takes advantage of the
techniques that Lisp makes possible, it can 
win outright.New: Download On Lisp for Free.
[1] "But no one can read
the program without understanding all your new utilities."
To see why such statements are usually mistaken,
see Section 4.8.
Aaron Swartz created a scraped
feed
of the essays page.
